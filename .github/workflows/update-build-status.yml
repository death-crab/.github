name: Update build status
run-name: Update status for ${{ github.event.client_payload.repository }} on ${{ github.event.client_payload.branch }}

on:
  repository_dispatch:
    types:
      - update-status

jobs:
  update-build-status:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Ensure build.json exists
      run: |
        mkdir -p status
        if [ ! -f status/build.json ]; then
          echo "{}" > status/build.json
        fi

    - name: Update build.json
      id: update-json
      run: |
        # Extract payload values
        PAYLOAD_REPO="${{ github.event.client_payload.repository }}"
        PAYLOAD_BRANCH="${{ github.event.client_payload.branch }}"
        PAYLOAD_STATUS="${{ github.event.client_payload.status }}"

        # Remove the organisation name (everything before the first "/")
        REPO_NAME=$(echo "$PAYLOAD_REPO" | cut -d'/' -f2)

        # Determine color based on status
        if [ "$PAYLOAD_STATUS" = "success" ]; then
          COLOR="brightgreen"
        elif [ "$PAYLOAD_STATUS" = "fail" ]; then
          COLOR="red"
        else
          COLOR="grey"
        fi
        
        # Get current timestamp in ISO 8601 format
        LAST_UPDATED=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        
        # Load and update JSON
        jq --arg repo "$REPO_NAME" \
           --arg branch "$PAYLOAD_BRANCH" \
           --arg status "$PAYLOAD_STATUS" \
           '.[$repo][$branch]: $status' \
           status/build.json > status/build.json.tmp && mv status/build.json.tmp status/build.json

    - name: Commit and push updated build.json
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add status/build.json
        git commit -m "Update build status for ${{ github.event.client_payload.repository }}/main [skip ci]"
        git push
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
