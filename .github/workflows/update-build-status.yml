name: Update build status
run-name: Update status for ${{ github.event.client_payload.repository }} on ${{ github.event.client_payload.branch }}

on:
  repository_dispatch:
    types:
      - update-status

jobs:
  update-build-status:
    runs-on: ubuntu-latest
    env:
      status-path: status
      package-file: packages.json
      build-status-file: build.json
      commit-message: Update build status for repository ${{ github.event.client_payload.repository }} [bot]
      
    steps:
    - name: Checkout SCM
      uses: actions/checkout@v4

    - name: Setup SCM
      shell: bash
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

    - name: Update build status file
      shell: bash
      run: |
        mkdir -p ${{ env.status-path }}
        cd ${{ env.status-path }}
        
        if [ ! -f ${{ env.build-status-file }} ]; then
          echo "{}" > ${{ env.build-status-file }} 
        fi
        
        # Remove the organisation name (everything before the first "/")
        REPO_NAME=$(echo "${{ github.event.client_payload.repository }}" | cut -d'/' -f2)
       
        jq --arg repo "$REPO_NAME" \
           --arg branch "${{ github.event.client_payload.branch }}" \
           --arg build "${{ github.event.client_payload.build }}" \
           --arg status "${{ github.event.client_payload.status }}" \
           '.[$repo][$build][$branch] = $status' \
           ${{ env.build-status-file }} > ${{ env.build-status-file }}.tmp && mv ${{ env.build-status-file }}.tmp ${{ env.build-status-file }} 

    - name: Generate package info file
      env:
        # Note that packages and containers endpoints in the GitHub API can ONLY be read using a classic PAT
        # https://docs.github.com/en/rest/packages/packages?apiVersion=2022-11-28#about-github-packages
        GITHUB_API_TOKEN: ${{ secrets.PACKAGE_READ_PAT }}
      run: |
        cd ${{ env.status-path }}
        chmod +x ./get-containers.sh
        ./get-containers.sh > ${{ env.package-file }}
        git add ${{ env.package-file }}

    - if: always()
      name: Update my own status
      run: |
        cd ${{ env.status-path }}
        REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
        jq --arg repo "$REPO_NAME" \
           --arg branch "main" \
           --arg build "${{ github.job }}" \
           --arg status "${{ job.status }}" \
           '.[$repo][$build][$branch] = $status' \
           ${{ env.build-status-file }} > ${{ env.build-status-file }}.tmp && mv ${{ env.build-status-file }}.tmp ${{ env.build-status-file }} 
        git add build.json
      
    - if: always()
      name: Push to SCM
      run: |
        cd ${{ env.status-path }}
        git diff --cached --quiet || (git commit -m "${{ env.commit-message }}" && git push)
