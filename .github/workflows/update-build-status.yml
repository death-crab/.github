name: Update build status
run-name: Update status for ${{ github.event.client_payload.repository }} on ${{ github.event.client_payload.branch }}

on:
  repository_dispatch:
    types:
      - update-status

jobs:
  update-build-status:
    runs-on: ubuntu-latest
    env:
      package-file: packages.json
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Update build status file
      run: |
        mkdir -p status
        cd status
        
        if [ ! -f build.json ]; then
          echo "{}" > build.json
        fi
        
        # Remove the organisation name (everything before the first "/")
        REPO_NAME=$(echo "${{ github.event.client_payload.repository }}" | cut -d'/' -f2)
       
        jq --arg repo "$REPO_NAME" \
           --arg branch "${{ github.event.client_payload.branch }}" \
           --arg build "${{ github.event.client_payload.build }}" \
           --arg status "${{ github.event.client_payload.status }}" \
           '.[$repo][$build][$branch] = $status' \
           build.json > build.json.tmp && mv build.json.tmp build.json

    - name: Generate package info file
      env:
        # Note that GitHub Apps cannot access packages. This has to be performed via the GITHUB_TOKEN or a user PAT.
        # https://github.com/orgs/community/discussions/24636#discussioncomment-11352345
        NuGetPackageSourceCredentials_death-crab: Username=github;Password=${{ secrets.GITHUB_TOKEN }}
      run: |
        cd status
        dotnet package search --source death-crab --configfile nuget.config --verbosity detailed --format json > ${{ env.package-file }}

    - if: always()
      name: Update my own status (we cannot dispatch as this could cause a recursive loop)
      run: |
        cd status
        REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
        jq --arg repo "$REPO_NAME" \
           --arg branch "main" \
           --arg build "${{ github.job }}" \
           --arg status "${{ job.status }}" \
           '.[$repo][$build][$branch] = $status' \
           build.json > build.json.tmp && mv build.json.tmp build.json
      
    - if: always()
      name: Commit and push
      run: |
        cd status
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add build.json
        git add ${{ env.package-file }}        
        commit_message="Update build status for repository ${{ github.event.client_payload.repository }} [bot]"
        git diff --cached --quiet || (git commit -m "${{ env.commit-message }}" && git push)
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
